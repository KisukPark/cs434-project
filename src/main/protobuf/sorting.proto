syntax = "proto3";

package com.sorting.protos;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHelloYa (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}



// Master -> Slave; implemented by slave
service MasterToSlave {
  rpc SendInitCompleted (SendInitCompletedRequest) returns (SendInitCompletedReply) {}
  rpc GetSamplingData (GetSamplingDataRequest) returns (GetSamplingDataReply) {}
  rpc SendPartitionTable (SendPartitionTableRequest) returns (SendPartitionTableReply) {}
  rpc SendPartitionStart (SendPartitionStartRequest) returns (SendPartitionStartReply) {}
  rpc SendShufflingStart (SendShufflingStartRequest) returns (SendShufflingStartReply) {}
  rpc SendMergeStart (SendMergeStartRequest) returns (SendMergeStartReply) {}
}

message SendInitCompletedRequest {
  repeated string slaveHostTable = 1;
}
message SendInitCompletedReply {}

message GetSamplingDataRequest {}
message GetSamplingDataReply {
  repeated string keys = 1;
}

message SendPartitionTableRequest {
  repeated string partitionTable = 1;
}
message SendPartitionTableReply {}
message SendPartitionStartRequest {}
message SendPartitionStartReply {}
message SendShufflingStartRequest {}
message SendShufflingStartReply {}
message SendMergeStartRequest {}
message SendMergeStartReply {}


// Slave -> Master; implemented by master
service SlaveToMaster {
  rpc GetSlavePort (GetSlavePortRequest) returns (GetSlavePortReply) {}
  rpc SendIntroduce (SendIntroduceRequest) returns (SendIntroduceReply) {}
}

message GetSlavePortRequest {
}

message GetSlavePortReply {
  int32 port = 1;
}

message SendIntroduceRequest {
  string host = 1;
  int32 port = 2;
}

message SendIntroduceReply {
}

// Slave -> Slave; implemented by slave
service SlaveToSlave {

}
